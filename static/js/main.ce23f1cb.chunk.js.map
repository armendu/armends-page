{"version":3,"sources":["resources/images/c-sharp-logo.png","components/HeaderComponent/Header.jsx","components/MainComponent/Main.jsx","components/ProjectsComponent/Projects.jsx","components/FooterComponent/Footer.jsx","components/AppComponent/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Header","className","href","icon","faHome","size","faUser","Main","Projects","class","src","CSharpLogo","alt","Footer","faGithub","faLinkedin","Date","getFullYear","data-name","xmlns","viewBox","preserveAspectRatio","d","SEL","SECTION_SEL","originalColors","App","useState","sectionsColor","component","fullpages","debug","licenseKey","process","navigation","navigationPosition","fitToSection","fixedElements","sectionSelector","onLeave","origin","destination","direction","console","log","render","comp","Wrapper","map","i","key","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,0C,0PCiB5BC,G,MAXA,kBACb,gCACE,yBAAKC,UAAU,YACb,4BACE,4BAAI,uBAAGC,KAAK,eAAc,kBAAC,IAAD,CAAiBC,KAAMC,IAAQC,KAAK,OAA1D,IAAkE,0BAAMJ,UAAU,WACtF,4BAAI,uBAAGC,KAAK,YAAW,kBAAC,IAAD,CAAiBC,KAAMG,IAAQD,KAAK,OAAvD,IAA+D,0BAAMJ,UAAU,gBCI5EM,G,MAZF,kBACX,6BAASN,UAAU,gBACjB,yBAAKA,UAAU,YACb,wBAAIA,UAAU,mBACZ,0BAAMA,UAAU,wBAAhB,oBACA,0BAAMA,UAAU,uBAAhB,kBAEF,uBAAGC,KAAK,qBAAqBD,UAAU,8BAAvC,kB,iBCcSO,G,MAnBE,kBACf,yBAAKC,MAAM,gBACT,yBAAKA,MAAM,aACT,yBAAKA,MAAM,OACT,yBAAKA,MAAM,6BACT,yBAAKA,MAAM,sBACT,4BAAI,wCAAiB,6BAArB,YACA,4CAEF,yBAAKA,MAAM,wBACT,yBAAKC,IAAKC,IAAYC,IAAI,Y,OCYvBC,G,MArBA,kBACb,gCACE,yBAAKZ,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,4BACE,4BAAI,uBAAGC,KAAK,8BAA6B,kBAAC,IAAD,CAAiBC,KAAMW,IAAUT,KAAK,SAC/E,4BAAI,uBAAGH,KAAK,iDAAgD,kBAAC,IAAD,CAAiBC,KAAMY,IAAYV,KAAK,QAApG,MAEF,8CAAqB,IAAIW,MAAOC,cAAhC,4BAIN,yBAAKR,MAAM,0CACT,yBAAKS,YAAU,UAAUC,MAAM,6BAA6BC,QAAQ,eAAeC,oBAAoB,QACrG,0BAAMC,EAAE,mMAAmMb,MAAM,oBCdnNc,EAAM,iBACNC,EAAW,WAAOD,GAElBE,EAAiB,CAAC,UAAW,OAAQ,QAqD5BC,EAnDH,WAAO,IAAD,EACQC,mBAAS,GAAD,OAAKF,IAA9BG,EADS,sBAEID,mBAAS,CAC3B,CACEE,UAAW,kBAAC,EAAD,OAEb,CACEA,UAAW,kBAAC,EAAD,OAEb,CACEA,UAAW,kBAAC,EAAD,SARRC,EAFS,oBAoBhB,OACI,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CACEC,OAAK,EAELC,WAAYC,aAGZC,YAAU,EACVC,mBAAoB,OACpBC,cAAc,EACdC,cAAe,mBACfC,gBAAiBd,EACjBe,QApBQ,SAACC,EAAQC,EAAaC,GACpCC,QAAQC,IAAI,UAAW,CAAEJ,SAAQC,cAAaC,eAoBxCd,cAAeA,EAEfiB,OAAQ,SAAAC,GAAI,OACV,kBAAC,IAAcC,QAAf,KACGjB,EAAUkB,KAAI,WAAgBC,GAAhB,IAAGpB,EAAH,EAAGA,UAAH,OACb,yBAAKqB,IAAKD,EAAGhD,UAAWsB,GACrBM,YCzCCsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASX,OAAO,kBAAC,EAAD,MAASY,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ce23f1cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/c-sharp-logo.9ffd0ff8.png\";","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHome, faUser } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport './Header.css';\r\n\r\nconst Header = () => (\r\n  <header>\r\n    <div className=\"menu-box\">\r\n      <ul>\r\n        <li><a href=\"default.asp\"><FontAwesomeIcon icon={faHome} size='2x' /> <span className=\"menu\"></span></a></li>\r\n        <li><a href=\"news.asp\"><FontAwesomeIcon icon={faUser} size='2x' /> <span className=\"menu\"></span></a></li>\r\n      </ul>\r\n    </div>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Main.css';\r\n\r\nconst Main = () => (\r\n  <section className=\"main-section\">\r\n    <div className=\"text-box\">\r\n      <h1 className=\"heading-primary\">\r\n        <span className=\"heading-primary-main\">Armend Ukehaxhaj</span>\r\n        <span className=\"heading-primary-sub\">Personal site</span>\r\n      </h1>\r\n      <a href=\"https://google.com\" className=\"btn btn-white btn-animated\">Learn more</a>\r\n    </div>\r\n  </section>\r\n);\r\n\r\nexport default Main;","import React from 'react';\r\nimport CSharpLogo from '../../resources/images/c-sharp-logo.png';\r\n\r\nimport './Projects.css';\r\n\r\nconst Projects = () => (\r\n  <div class=\"main-content\">\r\n    <div class=\"container\">\r\n      <div class=\"row\">\r\n        <div class=\"col-md-10 col-md-offset-1\">\r\n          <div class=\"left-text col-md-8\">\r\n            <h4><em>Tarscord</em><br /> Project</h4>\r\n            <p>Placeholder.</p>\r\n          </div>\r\n          <div class=\"right-image col-md-4\">\r\n            <img src={CSharpLogo} alt=\"\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\n\r\nexport default Projects;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faLinkedin, faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nimport './Footer.css';\r\n\r\nconst Footer = () => (\r\n  <footer>\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          <ul>\r\n            <li><a href=\"https://github.com/armendu\"><FontAwesomeIcon icon={faGithub} size='3x' /></a></li>\r\n            <li><a href=\"https://www.linkedin.com/in/armend-ukehaxhaj/\"><FontAwesomeIcon icon={faLinkedin} size='3x' /></a> </li>\r\n          </ul>\r\n          <p>Copyright &copy; {new Date().getFullYear()} Armend UkÃ«haxhaj </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"custom-shape-divider-bottom-1592149212\">\r\n      <svg data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1200 120\" preserveAspectRatio=\"none\">\r\n        <path d=\"M321.39,56.44c58-10.79,114.16-30.13,172-41.86,82.39-16.72,168.19-17.73,250.45-.39C823.78,31,906.67,72,985.66,92.83c70.05,18.48,146.53,26.09,214.34,3V0H0V27.35A600.21,600.21,0,0,0,321.39,56.44Z\" class=\"shape-fill\"></path>\r\n      </svg>\r\n    </div>\r\n  </footer>\r\n);\r\n\r\nexport default Footer;","import React, { useState } from 'react';\r\nimport ReactFullpage from '@fullpage/react-fullpage';\r\nimport Header from '../HeaderComponent/Header';\r\nimport Main from '../MainComponent/Main';\r\nimport Projects from '../ProjectsComponent/Projects';\r\nimport Footer from '../FooterComponent/Footer';\r\n\r\nconst SEL = 'custom-section';\r\nconst SECTION_SEL = `.${SEL}`;\r\n\r\nconst originalColors = ['#0099cc', '#3CF', '#3CF'];\r\n\r\nconst App = () => {\r\n  const [sectionsColor] = useState([...originalColors]);\r\n  const [fullpages] = useState([\r\n    {\r\n      component: <Main />\r\n    },\r\n    {\r\n      component: <Projects />\r\n    },\r\n    {\r\n      component: <Footer />\r\n    }\r\n  ]);\r\n\r\n  const onLeave = (origin, destination, direction) => {\r\n    console.log('onLeave', { origin, destination, direction });\r\n    // arguments are mapped in order of fullpage.js callback arguments do something\r\n    // with the event\r\n  }\r\n\r\n  return (\r\n      <div>\r\n        <Header />\r\n        <ReactFullpage\r\n          debug /* Debug logging */\r\n\r\n          licenseKey={process.env.REACT_APP_FULLPAGE_LICENSE_KEY}\r\n\r\n          // fullpage options\r\n          navigation\r\n          navigationPosition={'left'}\r\n          fitToSection={true}\r\n          fixedElements={'#header, .footer'}\r\n          sectionSelector={SECTION_SEL}\r\n          onLeave={onLeave}\r\n          sectionsColor={sectionsColor}\r\n\r\n          render={comp => (\r\n            <ReactFullpage.Wrapper>\r\n              {fullpages.map(({ component }, i) => (\r\n                <div key={i} className={SEL}>\r\n                  {component}\r\n                </div>\r\n              ))}\r\n            </ReactFullpage.Wrapper>\r\n          )}\r\n        />\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/AppComponent/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}